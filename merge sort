Merge Sort
  It is an efficient, general-purpose, comparison-based sorting algorithm.

Algorithm
1. Start 
2.Get the list to be sorted.
3.if it is only one element in the list it is already sorted, return.
  if ( n == 1 ) return value
4.Divide the list recursively into two halves until it can no more be divided.
   var l1 as array = a[0] ... a[n/2]
   var l2 as array = a[n/2+1] ... a[n]

   l1 = mergesort( l1 )
   l2 = mergesort( l2 )

   return merge( l1, l2 )
5.Merge the smaller lists into new list in sorted order.
  var c as array

   while ( a and b have elements )
      if ( a[0] > b[0] )
         add b[0] to the end of c
         remove b[0] from b
      else
         add a[0] to the end of c
         remove a[0] from a
      end if
   end while
   
   while ( a has elements )
      add a[0] to the end of c
      remove a[0] from a
   end while
   
   while ( b has elements )
      add b[0] to the end of c
      remove b[0] from b
   end while
   
   return c
6.Stop

Time Complexity
The complexity of merge sort is O(nlogn).
The divide step computes the midpoint of each of the sub-arrays. Each of this step just takes O(1) time.
The conquer step recursively sorts two subarrays of n/2 (for even n) elements each.
The merge step merges n elements which takes O(n) time.
