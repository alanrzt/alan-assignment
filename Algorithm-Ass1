Solution for first part:
Sort the set S using merge sort. Then for each y in S separately use binary search to check if integer x − y
exists in S. Sorting takes time O(nlogn). Binary search takes time O(logn) and is executed n times. The
total time is thus O(nlogn).
If S is sorted, the problem can also be solved in linear time by scanning the list S at the same time forward
and backward directions.
Display value if there exist two elements in S whose sum is exactly x.
1 i=1, j=n
2 while i ≤ j do
3 if S[i] +S[ j] = x then
4 return i value & j value 
5 if S[i] +S[ j] < x then
6 i = i+1
7 else
8 j = j −1

Solution for second part:
This can be solved by using hashmap method.
Since array is sorted,
1) Initialize Binary Hash Map M[] = {0, 0, ...}
2) for each element A[i] in A[]
   (a)	If M[x - A[i]] is set then print the pair (A[i], x - A[i])
   (b)	Set M[A[i]]
i.e bool binMap[MAX] = {0}; /*initialize hash map as 0
    for (i = 0; i < arr_size; i++)
  {
      variable = sum - arr[i];
      if (variable >= 0 && binMap[variable] == 1)
         printf("Pair with given sum %d is (%d, %d) \n", 
                 sum, arr[i], variable);
      binMap[arr[i]] = 1;
  }
}
